




Chapter 14 异常处理
	

	14.6.1 检查异常描述
		在编译期间通常难以检查所有异常，对一个函数来说，假设她可能会抛出任何异常。

		对函数而言，函数的异常申明和定义必须一致。
		int f() throw (std::bad_alloc);
		int f() // error！
		{
		
		}  

		异常描述并不一定需要检查，尤其是边界。因为对一个大系统，或者长期维护的系统来说，很多组件可能早已完成并良好运行。其实现和申明可能是分离的，部分代码可能无法再直接访问看到!
		可以使用虚函数配合继承来处理,但是要保证子类的异常不能比基类更严格(抛出更多的异常)!
		class B
		{
		public:
			virtual void f();

		}

		可以通过函数指针来提升异常限制restrictive. 但不能降低异常限制
		void f() throw(X);
		void (*pf1)() throw(X, Y) = &f; //ok
		void (*pf2)() throw() = &f;  //error:

		typedef 关键字不能用在异常函数中。
		typedef void (*pf3) () throw(X); 

